#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
typedef struct node
{
    int data;
    struct node *left;
    struct node *right;
}bt;

bt *create();
void preorder(root);
void inorder(bt *);
void postorder(bt *);

int ch;
bt *root=NULL;
int main()
{
    do
    {
    system("cls");
    printf("\n**OPERATIONS IN A BINARY TREE**\n");
    printf("1.Create tree\n");
    printf("2.Preorder Display\n");
    printf("3.Inorder Display\n");
    printf("4.Postorder Display\n");
    printf("5.Exit\n");
    printf("ENTER YOUR CHOICE :");
    scanf("%d",&ch);
    switch(ch)
    {
    case 1:
        root=create();
        break;
    case 2:
        printf("\nPREORDER TRAVERSAL \n");
        if (root==NULL)
            printf("Tree is empty");
        preorder(root);
        getch();
        break;
    case 3:
        printf("\nINORDER TRAVERSAL \n");
         if (root==NULL)
            printf("Tree is empty");
        inorder(root);
        getch();
        break;
    case 4:
        printf("\nPOSTORDER TRAVERSAL \n");
         if (root==NULL)
            printf("Tree is empty");
        postorder(root);
        getch();
        break;
    case 5:
        exit(0);
    default:printf("Enter valid input");
            exit(0);
    }
   }while(1);
}

bt *create()
{
    int x;
    bt *newnode;
    printf("Enter data: ");
    scanf("%d",&x);
    if(x==-1)
        return NULL;
    newnode=(bt*)malloc(sizeof(bt));
    newnode->data=x;
    printf("Enter left-node of %d (ENTER -1 FOR NO MORE INSERTION)\n",x);
    newnode->left=create();
    printf("Enter right-node of %d (ENTER -1 FOR NO MORE INSERTION)\n",x);
    newnode->right=create();
    return newnode;

}
void preorder(bt *root)
{

    if(root==NULL)
        return;
    printf("%d ",root->data);
    preorder(root->left);
    preorder(root->right);
}
void inorder(bt *root)
{
    if(root==NULL)
        return;
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
}
void postorder(bt *root)
{
    if(root==NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ",root->data);
}
